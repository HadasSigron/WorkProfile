name: WorkProfile CI/CD Pipeline (Docker Hub)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  IMAGE_NAME: workprofile

jobs:
  build-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      tag: ${{ steps.generate-tag.outputs.tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python 3.10 (with pip cache)
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
      - name: Install dependencies (app + test tools)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest flake8
      - name: Lint & Unit tests
        run: |
          flake8 .
          pytest --disable-warnings tests/test_app.py
      - name: Generate image tag
        id: generate-tag
        run: |
          TAG="build-$(date +%Y%m%d)-${GITHUB_SHA::7}"
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "Generated tag: ${TAG}"

  e2e-tests:
    needs: build-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python 3.10 (with pip cache)
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
      - name: Install only E2E helpers (no app deps duplicate)
        run: |
          python -m pip install --upgrade pip
          pip install requests
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.38.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose version
      - name: Build & Start full stack (docker-compose)
        run: |
          docker-compose up -d --build
          sleep 50
      - name: Smoke: "/" endpoint (compose -> 8080)
        run: curl --fail http://localhost:8080/
      - name: Smoke: "/health" endpoint
        run: curl --fail http://localhost:8080/health
      - name: Run E2E tests script
        run: |
          python tests/e2e_tests.py
      - name: Compose logs (on failure)
        if: failure()
        run: |
          docker-compose ps
          docker-compose logs workprofile || true
          docker-compose logs mysql || true
      - name: Compose cleanup
        if: always()
        run: |
          docker-compose down --volumes --remove-orphans

  push-image:
    needs:
      - build-test
      - e2e-tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build Docker image
        run: |
          TAG="${{ needs['build-test'].outputs.tag }}"
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${TAG} .
          docker tag  ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${TAG} \
                      ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
      - name: Push Docker images
        run: |
          TAG="${{ needs['build-test'].outputs.tag }}"
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${TAG}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest

  deploy-k8s:
    needs:
      - build-test
      - push-image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Create kind cluster (test)
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
          chmod +x ./kind && sudo mv ./kind /usr/local/bin/kind
          kind create cluster --wait 300s
          kubectl cluster-info
          kubectl get nodes
      - name: Create imagePullSecret (Docker Hub)
        run: |
          kubectl create secret docker-registry dockerhub \
            --docker-server=https://index.docker.io/v1/ \
            --docker-username=${{ secrets.DOCKERHUB_USERNAME }} \
            --docker-password=${{ secrets.DOCKERHUB_TOKEN }} \
            --docker-email=example@example.com
      - name: Deploy MySQL infra
        run: |
          kubectl apply -f k8s/mysql-secret.yaml
          kubectl create configmap mysql-initdb-config --from-file=init.sql=init.sql -o yaml --dry-run=client | kubectl apply -f -
          kubectl apply -f k8s/mysql-statefulset.yaml
          kubectl apply -f k8s/mysql-service.yaml
          kubectl wait --for=condition=ready pod/mysql-0 --timeout=300s
          kubectl get pods,svc,statefulset -l app=mysql
          kubectl get pvc
      - name: Deploy Workprofile app (image from Docker Hub)
        run: |
          TAG="${{ needs['build-test'].outputs.tag }}"
          IMAGE="docker.io/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${TAG}"
          sed -i "s|IMAGE_PLACEHOLDER|${IMAGE}|g" k8s/workprofile-deployment.yaml
          kubectl apply -f k8s/workprofile-configmap.yaml
          kubectl apply -f k8s/workprofile-deployment.yaml
          kubectl apply -f k8s/workprofile-service.yaml
          kubectl wait --for=condition=available deployment/workprofile --timeout=300s
          kubectl wait --for=condition=ready pod -l app=workprofile --timeout=300s
          kubectl get pods,svc,deployment -l app=workprofile
      - name: Verify stack
        run: |
          kubectl get all
          kubectl run mysql-client --image=mysql:5.7 -it --rm --restart=Never -- \
            mysql -h mysql-service -u flaskapp -pflaskapp -D exampleDb -e "SHOW DATABASES;"
          kubectl port-forward deployment/workprofile 5000:5000 &
          PF_PID=$!
          sleep 20
          curl -f http://localhost:5000/ && curl -f http://localhost:5000/health
          kill $PF_PID

